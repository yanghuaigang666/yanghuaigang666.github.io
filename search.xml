<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/63785.html"/>
      <url>/posts/63785.html</url>
      
        <content type="html"><![CDATA[<p>本系统采用Python[1]语言和 Redis[2]数据库，运用Django[3]框架进行项目开发，提高编程效率</p><a id="more"></a><h2 id="一、选题背景与意义"><a href="#一、选题背景与意义" class="headerlink" title="一、选题背景与意义"></a>一、选题背景与意义</h2><p>在学校日常教学活动中，管理学生作业是必不可少的一个环节，也是学以致用的一种有效途径。在传统的教学中，教师收发作业的形式多种多样：有的教师布置的是纸质作业，学生课后完成后统一上交给老师；有的教师布置的是电子档类的作业，学生通过Email、QQ等手段将作业交给老师，老师批改完成后再发回给学生……然而这些纸质作业、<br>电子档作业存在媒体刺激单一、反馈周期长等缺点，作业的批改和成绩统计需要花费大量的时间。为了减轻老师的作业批改工作量，加强学生与教师之间的交流，从学校的实际需求出发设计了在线作业管理系统，实现作业的在线发布、提交、批改、成绩统计、在线交流等功能。系统运行效果良好，对学生的考核评价新机制进行了有益的尝试。</p><blockquote><p>本文开发一个作业管理系统，系统分为教师端，学生端和管理员端，实现了课程管理，学生管理，作业管理，自定义考试和课程讨论等功能。软件界面灵活，操作简单,系统较好的实现了在线作业的功能，有助于引导学生平时的学习，对老师的课堂教学有一定的辅助作用。<br>本系统采用Python[1]语言和 Redis[2]数据库，运用Django[3]框架进行项目开发，提高编程效率。</p></blockquote><h2 id="二、国内外研究现状"><a href="#二、国内外研究现状" class="headerlink" title="二、国内外研究现状"></a>二、国内外研究现状</h2><blockquote><p>随着网络的不断发展，国家开始大力支持在线教育模式，相继出现了许多综合性、跨学科的在线作业应用系统，例如，厦门大学的网络教学平台    （<a href="https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。" target="_blank" rel="noopener">https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。</a><br>国外最知名的在线课程和作业管理系统[5]有：</p></blockquote><h3 id="1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"><a href="#1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。" class="headerlink" title="1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"></a>1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。</h3><h3 id="2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"><a href="#2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。" class="headerlink" title="2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"></a>2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。</h3><h3 id="3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"><a href="#3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。" class="headerlink" title="3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"></a>3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。</h3><h3 id="4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"><a href="#4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。" class="headerlink" title="4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"></a>4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。</h3><h3 id="5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"><a href="#5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。" class="headerlink" title="5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"></a>5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。</h3><hr><h2 id="三、主要研究内容"><a href="#三、主要研究内容" class="headerlink" title="三、主要研究内容"></a>三、主要研究内容</h2><h3 id="1-系统框架图"><a href="#1-系统框架图" class="headerlink" title="1. 系统框架图"></a>1. 系统框架图</h3><p><img src="https://www.google.com/url?sa=i&amp;source=images&amp;cd=&amp;ved=2ahUKEwiSpMa2gNPmAhWDdXAKHVM0BccQjRx6BAgBEAQ&amp;url=https%3A%2F%2Fwww.canva.cn%2Flearn%2Femotional-pictures%2F&amp;psig=AOvVaw3fryUeVbQFDglKKUKVqwy9&amp;ust=1577439022575791" alt="Google图片"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=16846091&amp;auto=1&amp;height=66"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><pre class="line-numbers language-python"><code class="language-python">$ hexo new ssasasssssssssssssssssssssasasssssssssssssssssssssssasasaaaaaaaaaaaaaaaaaaaaaaaaaasassssssssssssssssssssssssssssssassa<span class="token string">"MyNew Post"</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"MyNew Post"</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>text</title>
      <link href="/posts/51241.html"/>
      <url>/posts/51241.html</url>
      
        <content type="html"><![CDATA[<h1 id="撒大声地所"><a href="#撒大声地所" class="headerlink" title="撒大声地所"></a>撒大声地所</h1><h1 id="sddsds"><a href="#sddsds" class="headerlink" title="sddsds"></a>sddsds</h1><h1 id="sdsdsd"><a href="#sdsdsd" class="headerlink" title="sdsdsd"></a>sdsdsd</h1><h1 id="sdsdsds"><a href="#sdsdsds" class="headerlink" title="sdsdsds"></a>sdsdsds</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串</title>
      <link href="/posts/17074.html"/>
      <url>/posts/17074.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-生成一个其值等于chars的串T"><a href="#1-生成一个其值等于chars的串T" class="headerlink" title="1. 生成一个其值等于chars的串T"></a>1. 生成一个其值等于chars的串T</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">char</span> String<span class="token punctuation">[</span>MaxSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0-MaxSize: 0号单元存放串的长度</span><span class="token keyword">int</span> <span class="token function">StrAssign</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>chars<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token operator">></span> MaxSize<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>chars <span class="token operator">+</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-返回串的元素个数"><a href="#2-返回串的元素个数" class="headerlink" title="2. 返回串的元素个数"></a>2. 返回串的元素个数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>String T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-若S为空串-则返回1-否则返回0"><a href="#3-若S为空串-则返回1-否则返回0" class="headerlink" title="3. 若S为空串,则返回1,否则返回0"></a>3. 若S为空串,则返回1,否则返回0</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-打印字符串"><a href="#4-打印字符串" class="headerlink" title="4. 打印字符串"></a>4. 打印字符串</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">StrPrint</span><span class="token punctuation">(</span>String T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-用T返回S1和S2联接而成的新串。"><a href="#5-用T返回S1和S2联接而成的新串。" class="headerlink" title="5. 用T返回S1和S2联接而成的新串。"></a>5. 用T返回S1和S2联接而成的新串。</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Contact</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span>String S1<span class="token punctuation">,</span>String S2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>S2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>MaxSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//S2字符串没有截断</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>S2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            T<span class="token punctuation">[</span>i<span class="token operator">+</span>S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> S2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>S2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//S2字符串有截断,抛弃S2的剩余部分 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>MaxSize <span class="token operator">-</span> S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            T<span class="token punctuation">[</span>i<span class="token operator">+</span>S1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> S2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MaxSize<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-用Sub返回串S的第pos个字符起长度为len的子串。"><a href="#6-用Sub返回串S的第pos个字符起长度为len的子串。" class="headerlink" title="6. 用Sub返回串S的第pos个字符起长度为len的子串。"></a>6. 用Sub返回串S的第pos个字符起长度为len的子串。</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">SubString</span><span class="token punctuation">(</span>String Sub<span class="token punctuation">,</span>String S<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span>len<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>len<span class="token operator">></span>S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"长度len或位置pos错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        Sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>pos<span class="token operator">+</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-朴素的模式匹配法"><a href="#7-朴素的模式匹配法" class="headerlink" title="7. 朴素的模式匹配法"></a>7. 朴素的模式匹配法</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在,则函数返回值为0。 */</span><span class="token comment" spellcheck="true">/* 其中,T非空,1≤pos≤StrLength(S)。 */</span><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>String Sub<span class="token punctuation">,</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//i记录主串T的位置下标，从pos位置开始匹配</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//j记录子串Sub的位置下标，从第一个位置开始</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j退回第一个位置 </span>            i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//i回到上次匹配首位的下一个位置 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> i<span class="token operator">-</span>Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-通过计算返回子串T的next数组。"><a href="#8-通过计算返回子串T的next数组。" class="headerlink" title="8. 通过计算返回子串T的next数组。"></a>8. 通过计算返回子串T的next数组。</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>      i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i为后缀 </span>      j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j为前缀 </span>      next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 此处T[0]表示串T的长度 */</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>        <span class="token punctuation">{</span>              <span class="token operator">++</span>i<span class="token punctuation">;</span>              <span class="token operator">++</span>j<span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//kmp改进 </span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">else</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span>             j<span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 若字符不相同，则j值回溯 */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-输出Next数组值。"><a href="#9-输出Next数组值。" class="headerlink" title="9. 输出Next数组值。"></a>9. 输出Next数组值。</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">NextPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-KMP算法"><a href="#10-KMP算法" class="headerlink" title="10 . KMP算法"></a>10 . KMP算法</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在,则函数返回值为0。 */</span><span class="token comment" spellcheck="true">/* 其中,T非空,1≤pos≤StrLength(S)。 */</span><span class="token keyword">int</span> <span class="token function">Index_KMP</span><span class="token punctuation">(</span>String Sub<span class="token punctuation">,</span>String T<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//i记录主串T的位置下标，从pos位置开始匹配</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//j记录子串Sub的位置下标，从第一个位置开始</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">get_next</span><span class="token punctuation">(</span>Sub<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> i<span class="token operator">-</span>Sub<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：以上代码，参考的《大话数据结构》、和小甲鱼数据结构视频</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一元多项式</title>
      <link href="/posts/53259.html"/>
      <url>/posts/53259.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-存储结构表示"><a href="#1-存储结构表示" class="headerlink" title="1.存储结构表示"></a>1.存储结构表示</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> PolyNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> coef<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//系数 </span>    <span class="token keyword">int</span> expon<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指数 </span>    <span class="token keyword">struct</span> PolyNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>PolyNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> PolyNode <span class="token operator">*</span>Polynomial<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-新节点加到结果链表的尾部"><a href="#2-新节点加到结果链表的尾部" class="headerlink" title="2.新节点加到结果链表的尾部"></a>2.新节点加到结果链表的尾部</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Attach</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>Polynomial <span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial P<span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PolyNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//申请新节点 </span>    P<span class="token operator">-></span>coef <span class="token operator">=</span> c<span class="token punctuation">;</span>    P<span class="token operator">-></span>expon <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>pRear<span class="token punctuation">)</span> <span class="token operator">=</span> P<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改一下 *pRear的指向 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-读入多项式"><a href="#3-读入多项式" class="headerlink" title="3.读入多项式"></a>3.读入多项式</h4><pre class="line-numbers language-c"><code class="language-c">Polynomial <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial P<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入多项式项数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PolyNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//申请一个空结点作为链表的头 </span>    P<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    rear <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Attach</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前项插入到多项式尾部 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放之前生成的空节点</span>    Polynomial temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> P<span class="token punctuation">;</span>    P <span class="token operator">=</span> P<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> P<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回链表的第一个结点 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-P1与P2多项式相加，添加到一个结果链表中，返回结果链表的第一个结点"><a href="#4-P1与P2多项式相加，添加到一个结果链表中，返回结果链表的第一个结点" class="headerlink" title="4.P1与P2多项式相加，添加到一个结果链表中，返回结果链表的第一个结点"></a>4.P1与P2多项式相加，添加到一个结果链表中，返回结果链表的第一个结点</h4><pre class="line-numbers language-c"><code class="language-c">Polynomial <span class="token function">Polyadd1</span><span class="token punctuation">(</span>Polynomial P1<span class="token punctuation">,</span>Polynomial P2<span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果多项式的头和尾 </span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    rear <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PolyNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    front <span class="token operator">=</span> rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//都指向结果链表的头结点 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>P1<span class="token operator">&amp;&amp;</span>P2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两个多项式非零项相加 </span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">Compare</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>expon<span class="token punctuation">,</span>P2<span class="token operator">-></span>expon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>P1多项式指数比P2大                 <span class="token function">Attach</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>coef<span class="token punctuation">,</span>P1<span class="token operator">-></span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>                P1 <span class="token operator">=</span> P1<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>P2多项式指数比P1大                 <span class="token function">Attach</span><span class="token punctuation">(</span>P2<span class="token operator">-></span>coef<span class="token punctuation">,</span>P2<span class="token operator">-></span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>                P2 <span class="token operator">=</span> P2<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>P1多项式指数和P2相等                 sum <span class="token operator">=</span> P1<span class="token operator">-></span>coef <span class="token operator">+</span> P2<span class="token operator">-></span>coef<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//系数相加 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//系数不为0 </span>                    <span class="token function">Attach</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>P1<span class="token operator">-></span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>                P1 <span class="token operator">=</span> P1<span class="token operator">-></span>next<span class="token punctuation">;</span>                P2 <span class="token operator">=</span> P2<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//P1指向的多项式没处理完，剩余项数直接添加到结构多项式末尾 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>P1<span class="token punctuation">;</span>P1<span class="token operator">=</span>P1<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>coef<span class="token punctuation">,</span>P1<span class="token operator">-></span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    while(P1)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        Attach(P1->coef,P1->expon,&amp;rear);</span><span class="token comment" spellcheck="true">//        P1 = P1->next;    </span><span class="token comment" spellcheck="true">//    } </span>    <span class="token comment" spellcheck="true">//P2指向的多项式没处理完，剩余项数直接添加到结构多项式末尾 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>P2<span class="token punctuation">;</span>P2<span class="token operator">=</span>P2<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>P2<span class="token operator">-></span>coef<span class="token punctuation">,</span>P2<span class="token operator">-></span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    while(P2)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        Attach(P2->coef,P2->expon,&amp;rear);</span><span class="token comment" spellcheck="true">//        P2=P2->next; </span><span class="token comment" spellcheck="true">//    } </span>    Polynomial temp<span class="token punctuation">;</span>    rear<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> front<span class="token punctuation">;</span>     front <span class="token operator">=</span> front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为之前的front是指向结果链表的头结点，而不是第一个结点 </span>    <span class="token keyword">return</span> front<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回结果链表的第一个结点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-P1与P2多项式相乘，添加到一个结果链表中，返回结果链表的第一个结点"><a href="#4-P1与P2多项式相乘，添加到一个结果链表中，返回结果链表的第一个结点" class="headerlink" title="4.P1与P2多项式相乘，添加到一个结果链表中，返回结果链表的第一个结点"></a>4.P1与P2多项式相乘，添加到一个结果链表中，返回结果链表的第一个结点</h4><pre class="line-numbers language-c"><code class="language-c">Polynomial <span class="token function">Mult</span><span class="token punctuation">(</span>Polynomial P1<span class="token punctuation">,</span>Polynomial P2<span class="token punctuation">)</span><span class="token punctuation">{</span>    Polynomial P<span class="token punctuation">,</span>Rear<span class="token punctuation">,</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>e<span class="token punctuation">;</span>    t1 <span class="token operator">=</span> P1<span class="token punctuation">;</span>    t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>P1 <span class="token operator">||</span> <span class="token operator">!</span>P2<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PolyNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Rear <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先用P1的第1项乘以P2，得到P</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Attach</span><span class="token punctuation">(</span>t1<span class="token operator">-></span>coef<span class="token operator">*</span>t2<span class="token operator">-></span>coef<span class="token punctuation">,</span>t1<span class="token operator">-></span>expon<span class="token operator">+</span>t2<span class="token operator">-></span>expon<span class="token punctuation">,</span><span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2 <span class="token operator">=</span> t2<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    t1 <span class="token operator">=</span> t1<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//t1指向P1多项式的第二项 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t2 <span class="token operator">=</span> P2<span class="token punctuation">;</span>        Rear <span class="token operator">=</span> P<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            c <span class="token operator">=</span> t1<span class="token operator">-></span>coef<span class="token operator">*</span>t2<span class="token operator">-></span>coef<span class="token punctuation">;</span>            e <span class="token operator">=</span> t1<span class="token operator">-></span>expon<span class="token operator">+</span>t2<span class="token operator">-></span>expon<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>Rear<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> Rear<span class="token operator">-></span>next<span class="token operator">-></span>expon <span class="token operator">></span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                Rear <span class="token operator">=</span> Rear<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Rear<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> Rear<span class="token operator">-></span>next<span class="token operator">-></span>expon <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//系数相等 </span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Rear<span class="token operator">-></span>next<span class="token operator">-></span>coef<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//合并同类项的系数不为0 </span>                    Rear<span class="token operator">-></span>next<span class="token operator">-></span>coef <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//系数为0，删除该节点 </span>                    temp <span class="token operator">=</span> Rear<span class="token operator">-></span>next<span class="token punctuation">;</span>                    Rear<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>                    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PolyNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token operator">-></span>coef <span class="token operator">=</span> c<span class="token punctuation">;</span>                temp<span class="token operator">-></span>expon <span class="token operator">=</span> e<span class="token punctuation">;</span>                temp<span class="token operator">-></span>next <span class="token operator">=</span> Rear<span class="token operator">-></span>next<span class="token punctuation">;</span>                Rear<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                Rear <span class="token operator">=</span> Rear<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            t2 <span class="token operator">=</span> t2<span class="token operator">-></span>next<span class="token punctuation">;</span>             <span class="token punctuation">}</span>        t1 <span class="token operator">=</span> t1<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    t2 <span class="token operator">=</span> P<span class="token punctuation">;</span>    P <span class="token operator">=</span>P<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> P<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-输出结果"><a href="#5-输出结果" class="headerlink" title="5.输出结果"></a>5.输出结果</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PrintPoly</span><span class="token punctuation">(</span>Polynomial P<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>P<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// if(!flag) </span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>P<span class="token operator">-></span>coef<span class="token punctuation">,</span>P<span class="token operator">-></span>expon<span class="token punctuation">)</span><span class="token punctuation">;</span>        P <span class="token operator">=</span> P<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github代码托管</title>
      <link href="/posts/61831.html"/>
      <url>/posts/61831.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h4><p>在github上new repository</p><h4 id="2-添加ssh密钥"><a href="#2-添加ssh密钥" class="headerlink" title="2. 添加ssh密钥"></a>2. 添加ssh密钥</h4><p>在github的setting中，添加自己电脑生成rsa公钥</p><h4 id="3-克隆项目"><a href="#3-克隆项目" class="headerlink" title="3. 克隆项目"></a>3. 克隆项目</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:yanghuaigang666/helloWorld.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果克隆出错，使用以下命令：,再使用克隆命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>ssh-agent -s<span class="token variable">)</span></span>"</span>ssh-add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-上传分支"><a href="#4-上传分支" class="headerlink" title="4. 上传分支"></a>4. 上传分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b dev  //创建分支<span class="token function">git</span> branch  //查看分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在分支中创建需要实现的功能代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> code.py  //功能代码<span class="token function">git</span> add code.py<span class="token function">git</span> commit -m <span class="token string">"版本1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin smart //推送分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-本地分支跟踪服务器分支"><a href="#5-本地分支跟踪服务器分支" class="headerlink" title="5. 本地分支跟踪服务器分支"></a>5. 本地分支跟踪服务器分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/远程分支名称 本地分支名称例：<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-从远程分支上拉取代码"><a href="#6-从远程分支上拉取代码" class="headerlink" title="6. 从远程分支上拉取代码"></a>6. 从远程分支上拉取代码</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull orgin 分支名称例：<span class="token function">git</span> pull orgin smart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-工作中使用git"><a href="#7-工作中使用git" class="headerlink" title="7. 工作中使用git"></a>7. 工作中使用git</h4><p><strong>项目经理：</strong></p><p>(1)   项目经理搭建项目的框架。</p><p>(2)   搭建完项目框架之后，项目经理把项目框架代码放到服务器。</p><p><strong>普通员工：</strong></p><p>(1)  在自己的电脑上，生成ssh公钥，然后把公钥给项目经理，项目经理把它添加的服务器上面。</p><p>(2)  项目经理会给每个组员的项目代码的地址，组员把代码下载到自己的电脑上。</p><p>(3)  创建本地的分支dev,在dev分支中进行每天的开发。</p><p>(4)  每一个员工开发完自己的代码之后，都需要将代码发布远程的dev分支上。</p><p>Master:用户保存发布的项目代码。V1.0,V2.0</p><p>Dev:保存开发过程中的代码。</p><p><img src="/posts/61831/git.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分支管理</title>
      <link href="/posts/50976.html"/>
      <url>/posts/50976.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建与合并分支"><a href="#1-创建与合并分支" class="headerlink" title="1. 创建与合并分支"></a>1. 创建与合并分支</h4><ul><li><p>master:主分支</p></li><li><p>HEAD：指向的是当前分支</p></li><li><p>建立仓库时，一开始HEAD指向的是master</p></li><li><p>每次提交，master分支都会向前移动一步</p><p><img src="/posts/50976/git3.png" alt=""></p></li></ul><h4 id="2-创建分支-并跳转到dev分支"><a href="#2-创建分支-并跳转到dev分支" class="headerlink" title="2. 创建分支,并跳转到dev分支"></a>2. 创建分支,并跳转到dev分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch dev //创建分支dev<span class="token function">git</span> checkout dev //切换到dev分支<span class="token function">git</span> checkout -b dev  //创建分支,并跳转到dev分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-查看分支"><a href="#3-查看分支" class="headerlink" title="3.  查看分支"></a>3.  查看分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/50976/git4.png" alt=""></p><h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4. 合并分支"></a>4. 合并分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/50976/git5.png" alt=""></p><h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5.  删除分支"></a>5.  删除分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch -d dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-小结"><a href="#6-小结" class="headerlink" title="6.  小结"></a>6.  小结</h4><blockquote><p>查看分支：git branch</p><p>创建分支：git branch <name></name></p><p>切换分支：git checkout <name></name></p><p>创建+切换分支：git checkout -b <name></name></p><p>合并某分支到当前分支：git merge <name></name></p><p>删除分支：git branch -d <name></name></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git版本管理</title>
      <link href="/posts/44942.html"/>
      <url>/posts/44942.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-git简介"><a href="#1-git简介" class="headerlink" title="1. git简介"></a>1. git简介</h4><p>git是目前世界上最先进的分布式版本控制系统。与之相对应还有CVS、SVN这些免费的版本控制系统。gtihub是一个代码托管的网站。</p><ul><li><p>版本控制：可以解决多人同时开发的代码问题，也可以解决找回历史代码的问题。</p></li><li><p>分布式：Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。</p></li></ul><h4 id="2-git安装"><a href="#2-git安装" class="headerlink" title="2. git安装"></a>2. git安装</h4><ol><li><p>Linux安装命令:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Windows安装</p><p> <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a></p></li></ol><h4 id="3-创建版本库"><a href="#3-创建版本库" class="headerlink" title="3. 创建版本库"></a>3. 创建版本库</h4><p>新建一个目录git_test，在git_test目录下创建一个版本库，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> git_test <span class="token function">cd</span> git_test<span class="token function">git</span> init //初始化，目录下方生成.git隐藏目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-版本管理"><a href="#4-版本管理" class="headerlink" title="4. 版本管理"></a>4. 版本管理</h4><h5 id="4-1-版本创建与回退"><a href="#4-1-版本创建与回退" class="headerlink" title="4.1 版本创建与回退"></a>4.1 版本创建与回退</h5><ol><li><p>在git_test目录下创建一个文件code.txt，编辑内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> code.txt<span class="token function">vi</span> code.txt  //在文件中写点内容<span class="token function">cat</span> code.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用如下两条命令可以创建一个版本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add code.txt<span class="token function">git</span> commit -m <span class="token string">'版本1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看版本记录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>继续编辑code.txt，在里面增加一行。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> code.txt  //在文件中再添加点内容<span class="token function">cat</span> code.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用如下命令再创建一个版本并查看版本记录:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add code.txt<span class="token function">git</span> commit -m '版本2‘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>现在若想回到某一个版本，可以使用如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HEAD表示当前最新版本，HEAD^表示当前版本的前一个版</p></li><li><p>假如我们现在又想回到版本2，可以使用如下命令：然后cat查看一下code.txt的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard 版本序列号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看我们的操作记录(当我们关闭git终端后，可以查看版本序列号)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="4-2-工作区与暂存区"><a href="#4-2-工作区与暂存区" class="headerlink" title="4.2 工作区与暂存区"></a>4.2 工作区与暂存区</h5><ul><li><p>git_test就是工作区(Working Directory)</p></li><li><p>git_test目录下方的index(stage)就是暂存区，命令：git add 文件 ，就是往暂存区添加文件</p></li><li><p>版本库(repository)，命令：git commit 文件，就是往版本库的分支(master)提交更改</p><p><img src="/posts/44942/git1.png" alt=""></p></li></ul><ol><li><p>在git_test目录下创建一个文件code2.txt，编辑内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> code2.txt<span class="token function">vi</span> code2.txt  //在文件中写点内容<span class="token function">cat</span> code2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看当前工作树的状态</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> status //当前工作树状态<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行以下命令将code2.txt添加到暂存区，然后查看状态</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add code2.txt<span class="token function">git</span> status //当前工作树状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>执行以下命令将code2.txt提交到版本库，然后查看状态</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m '版本3‘<span class="token function">git</span> status //当前工作树状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="4-3-修改操作"><a href="#4-3-修改操作" class="headerlink" title="4.3 修改操作"></a>4.3 修改操作</h5><ul><li><p>修改文件</p><p>只有修改后文件被添加到暂存区才会创建新版本库。</p></li><li><p>撤销修改</p><p>每次对文件的添加、提交操作执行查看工作室树状态，都会有撤销命令的提示</p><ol><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考4.1的版本回退</li></ol></li></ul><h5 id="4-4-对比文件的不同"><a href="#4-4-对比文件的不同" class="headerlink" title="4.4 对比文件的不同"></a>4.4 对比文件的不同</h5><ul><li><p>对比工作区和某个版本中文件的不同</p><p>对比工作区中code.txt和HEAD版本中code.txt的不同</p><p><img src="/posts/44942/git2.png" alt=""></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> HEAD --code.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对比两个版本间文件的不同</p><p>对比HEAD和HEAD^版本中code.txt的不同</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> HEAD HEAD^ -- code.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>放弃对工作区文件的改动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout -- code.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="4-5-删除文件"><a href="#4-5-删除文件" class="headerlink" title="4.5 删除文件"></a>4.5 删除文件</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> code.txt<span class="token function">git</span> <span class="token function">rm</span> code2.txt<span class="token function">git</span> commit -m code2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波拉契数列</title>
      <link href="/posts/2560.html"/>
      <url>/posts/2560.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-递归实现"><a href="#1-递归实现" class="headerlink" title="1.递归实现"></a>1.递归实现</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        if(i==0)</span><span class="token comment" spellcheck="true">//            return 0;</span><span class="token comment" spellcheck="true">//        else if(i==1)</span><span class="token comment" spellcheck="true">//            return 1;</span>        <span class="token keyword">return</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Fibonacci</span><span class="token punctuation">(</span>i<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-迭代实现"><a href="#2-迭代实现" class="headerlink" title="2.迭代实现"></a>2.迭代实现</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-主函数"><a href="#3-主函数" class="headerlink" title="3.主函数"></a>3.主函数</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token function">Fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式队列</title>
      <link href="/posts/21414.html"/>
      <url>/posts/21414.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-存储结构表示"><a href="#1-存储结构表示" class="headerlink" title="1.存储结构表示"></a>1.存储结构表示</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> QNode <span class="token comment" spellcheck="true">//节点结构 </span><span class="token punctuation">{</span>      ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> QNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>QNode<span class="token punctuation">,</span><span class="token operator">*</span>QNodePtr<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  <span class="token comment" spellcheck="true">//代表队列的链表结构 </span><span class="token punctuation">{</span>    QNodePtr front<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向头节点,注意不是指向队头节点 </span>    QNodePtr rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向队尾节点 </span><span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-构造一个空队列"><a href="#2-构造一个空队列" class="headerlink" title="2.构造一个空队列"></a>2.构造一个空队列</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Q<span class="token operator">-></span>front <span class="token operator">=</span> Q<span class="token operator">-></span>rear<span class="token operator">=</span><span class="token punctuation">(</span>QNodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Q<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-入队"><a href="#3-入队" class="headerlink" title="3.入队"></a>3.入队</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNodePtr q<span class="token punctuation">;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>QNodePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    q<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> q<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-出队"><a href="#4-出队" class="headerlink" title="4.出队"></a>4.出队</h4><pre class="line-numbers language-c"><code class="language-c">ElemType <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ElemType e<span class="token punctuation">;</span>        QNodePtr p<span class="token punctuation">;</span>    p <span class="token operator">=</span> Q<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//p指向队头结点</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    Q<span class="token operator">-></span>front<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">==</span>p<span class="token punctuation">)</span>        Q<span class="token operator">-></span>rear<span class="token operator">=</span>Q<span class="token operator">-></span>front<span class="token punctuation">;</span>     <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-遍历队列"><a href="#5-遍历队列" class="headerlink" title="5.遍历队列"></a>5.遍历队列</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNodePtr p<span class="token punctuation">;</span>    p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列</title>
      <link href="/posts/220.html"/>
      <url>/posts/220.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-顺序存储结构"><a href="#1-顺序存储结构" class="headerlink" title="1.顺序存储结构"></a>1.顺序存储结构</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//头指针 </span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾指针 </span><span class="token punctuation">}</span>Queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-初始化空队列"><a href="#2-初始化空队列" class="headerlink" title="2.初始化空队列"></a>2.初始化空队列</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断是否为空"><a href="#3-判断是否为空" class="headerlink" title="3.判断是否为空"></a>3.判断是否为空</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-获取队列中元素个数，也就是队列当前长度"><a href="#4-获取队列中元素个数，也就是队列当前长度" class="headerlink" title="4.获取队列中元素个数，也就是队列当前长度"></a>4.获取队列中元素个数，也就是队列当前长度</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">-</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span>MaxSize<span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-入队"><a href="#5-入队" class="headerlink" title="5.入队"></a>5.入队</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断队列满</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize <span class="token operator">==</span> Q<span class="token operator">-></span>front<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-出队"><a href="#6-出队" class="headerlink" title="6.出队"></a>6.出队</h4><pre class="line-numbers language-c"><code class="language-c">ElemType <span class="token function">deleteQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断队列空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>front <span class="token operator">==</span> Q<span class="token operator">-></span>rear<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     ElemType e<span class="token punctuation">;</span>    e <span class="token operator">=</span> Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-获取队头元素"><a href="#7-获取队头元素" class="headerlink" title="7.获取队头元素"></a>7.获取队头元素</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getHead</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断是否为空 </span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-遍历队列"><a href="#8-遍历队列" class="headerlink" title="8.遍历队列"></a>8.遍历队列</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式栈</title>
      <link href="/posts/19776.html"/>
      <url>/posts/19776.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-链栈存储结构"><a href="#1-链栈存储结构" class="headerlink" title="1.链栈存储结构"></a>1.链栈存储结构</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>Stack<span class="token punctuation">;</span><span class="token keyword">struct</span> StackNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-构建一个空栈"><a href="#2-构建一个空栈" class="headerlink" title="2.构建一个空栈"></a>2.构建一个空栈</h4><pre class="line-numbers language-c"><code class="language-c">Stack <span class="token function">CreateStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack S<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//S指向堆栈的头结点 </span>    S <span class="token operator">=</span> <span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> StackNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头结点S其实就是栈顶指针 </span>    <span class="token keyword">return</span> S<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断栈是否为空"><a href="#3-判断栈是否为空" class="headerlink" title="3.判断栈是否为空"></a>3.判断栈是否为空</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    如果为空，返回1 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-入栈-与单链表的头插法相似"><a href="#4-入栈-与单链表的头插法相似" class="headerlink" title="4.入栈(与单链表的头插法相似)"></a>4.入栈(与单链表的头插法相似)</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//链式结构，不考虑是否栈满 </span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新节点 </span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> StackNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> StackNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span>    S<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-出栈"><a href="#5-出栈" class="headerlink" title="5.出栈"></a>5.出栈</h4><pre class="line-numbers language-c"><code class="language-c">ElemType <span class="token function">Pop</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个要删除的节点 </span>    ElemType e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断栈是否为空 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span>    <span class="token punctuation">{</span>        q <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//入栈操作</span>        S<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-获取栈的长度"><a href="#6-获取栈的长度" class="headerlink" title="6.获取栈的长度"></a>6.获取栈的长度</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-遍历栈"><a href="#7-遍历栈" class="headerlink" title="7.遍历栈"></a>7.遍历栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向第一个节点 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-获取栈顶元素"><a href="#8-获取栈顶元素" class="headerlink" title="8.获取栈顶元素"></a>8.获取栈顶元素</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两栈共享空间</title>
      <link href="/posts/46339.html"/>
      <url>/posts/46339.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-共享栈存储结构表示"><a href="#1-共享栈存储结构表示" class="headerlink" title="1.共享栈存储结构表示"></a>1.共享栈存储结构表示</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈1栈顶指针 </span>    <span class="token keyword">int</span> top2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈2栈顶指针 </span><span class="token punctuation">}</span>SqDoubleStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-构造一个空的共享栈"><a href="#2-构造一个空的共享栈" class="headerlink" title="2.构造一个空的共享栈"></a>2.构造一个空的共享栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitDoubleStack</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token operator">-></span>top1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    S<span class="token operator">-></span>top2 <span class="token operator">=</span> MaxSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断是否为空"><a href="#3-判断是否为空" class="headerlink" title="3.判断是否为空"></a>3.判断是否为空</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>SqDoubleStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top1<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">.</span>top2<span class="token operator">==</span>MaxSize<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-获取栈的长度"><a href="#4-获取栈的长度" class="headerlink" title="4.获取栈的长度"></a>4.获取栈的长度</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>SqDoubleStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>MaxSize<span class="token operator">-</span>S<span class="token punctuation">.</span>top2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-入栈"><a href="#5-入栈" class="headerlink" title="5.入栈"></a>5.入栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">,</span><span class="token keyword">int</span> stackNum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断是否栈满</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top2 <span class="token operator">==</span> S<span class="token operator">-></span>top1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈满\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top2<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈号错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-出栈"><a href="#6-出栈" class="headerlink" title="6.出栈"></a>6.出栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>S<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">,</span> <span class="token keyword">int</span> stackNum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈1为空栈\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top2<span class="token operator">==</span>MaxSize<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈2为空栈\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top2<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#### <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-遍历栈"><a href="#7-遍历栈" class="headerlink" title="7.遍历栈"></a>7.遍历栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>SqDoubleStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>S<span class="token punctuation">.</span>top1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> j<span class="token operator">=</span>S<span class="token punctuation">.</span>top2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>MaxSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-获取栈顶元素"><a href="#8-获取栈顶元素" class="headerlink" title="8.获取栈顶元素"></a>8.获取栈顶元素</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>SqDoubleStack S<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">,</span><span class="token keyword">int</span> stackNum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top1<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top2<span class="token operator">==</span>MaxSize<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序栈</title>
      <link href="/posts/16399.html"/>
      <url>/posts/16399.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-存储结构描述"><a href="#1-存储结构描述" class="headerlink" title="1.存储结构描述"></a>1.存储结构描述</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶指针 </span><span class="token punctuation">}</span>SqStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-构造一个空栈"><a href="#2-构造一个空栈" class="headerlink" title="2.构造一个空栈"></a>2.构造一个空栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token operator">-></span>top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断是否为空"><a href="#3-判断是否为空" class="headerlink" title="3.判断是否为空"></a>3.判断是否为空</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    if(S.top==-1)</span><span class="token comment" spellcheck="true">//        return 1;</span><span class="token comment" spellcheck="true">//    else</span><span class="token comment" spellcheck="true">//        return 0;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-获取栈的长度"><a href="#4-获取栈的长度" class="headerlink" title="4.获取栈的长度"></a>4.获取栈的长度</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> S<span class="token punctuation">.</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-获取栈顶元素，将栈顶元素保存到e中"><a href="#5-获取栈顶元素，将栈顶元素保存到e中" class="headerlink" title="5.获取栈顶元素，将栈顶元素保存到e中"></a>5.获取栈顶元素，将栈顶元素保存到e中</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-入栈"><a href="#6-入栈" class="headerlink" title="6.入栈"></a>6.入栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top <span class="token operator">==</span> MAXSIZE<span class="token number">-1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断栈满 </span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    S->top++;</span><span class="token comment" spellcheck="true">//    S->data[S->top]=e; </span>    S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-出栈"><a href="#7-出栈" class="headerlink" title="7.出栈"></a>7.出栈</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断栈空</span><span class="token comment" spellcheck="true">//    *e = S->data[S->top];</span><span class="token comment" spellcheck="true">//    S->top--; </span>    <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-遍历栈，从栈底到栈顶"><a href="#8-遍历栈，从栈底到栈顶" class="headerlink" title="8.遍历栈，从栈底到栈顶"></a>8.遍历栈，从栈底到栈顶</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>S<span class="token punctuation">.</span>top<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表之链式存储(单链表)</title>
      <link href="/posts/28473.html"/>
      <url>/posts/28473.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-存储结构表示"><a href="#1-存储结构表示" class="headerlink" title="1.存储结构表示"></a>1.存储结构表示</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结点的数据域 </span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结点的指针域 </span><span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node <span class="token operator">*</span>LinkList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 定义LinkList */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-初始化线性表"><a href="#2-初始化线性表" class="headerlink" title="2.初始化线性表"></a>2.初始化线性表</h4><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//产生头结点，L指向头结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内存分配失败</span>    <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置L为头结点，初始化线性表为空</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断是否为空表"><a href="#3-判断是否为空表" class="headerlink" title="3.判断是否为空表"></a>3.判断是否为空表</h4><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-获取表长度"><a href="#4-获取表长度" class="headerlink" title="4.获取表长度"></a>4.获取表长度</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkList p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向第一个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-获取L中第i个位置数据值，用e保存"><a href="#5-获取L中第i个位置数据值，用e保存" class="headerlink" title="5.获取L中第i个位置数据值，用e保存"></a>5.获取L中第i个位置数据值，用e保存</h4><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计数器 </span>    LinkList p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明一节点p </span>    p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p指向第一个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//节点不存在条件 </span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token operator">*</span>e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存第i个位置的数据元素值到e </span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-查找e元素所在位置i"><a href="#6-查找e元素所在位置i" class="headerlink" title="6.查找e元素所在位置i"></a>6.查找e元素所在位置i</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Find_pos</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LinkList p<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//p指向L的第一个节点 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token operator">==</span>e<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到返回i </span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若这样的数据元素不存在，则返回值为0 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-在L中第i个位置之前插入新的数据元素e"><a href="#7-在L中第i个位置之前插入新的数据元素e" class="headerlink" title="7.在L中第i个位置之前插入新的数据元素e"></a>7.在L中第i个位置之前插入新的数据元素e</h4><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">Insert</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    LinkList p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向头结点</span>    <span class="token comment" spellcheck="true">//1.先找到第i-1位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.插入s节点 </span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成s节点</span>    s<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-删除L的第i个数据元素-e保存其值"><a href="#8-删除L的第i个数据元素-e保存其值" class="headerlink" title="8.删除L的第i个数据元素,e保存其值"></a>8.删除L的第i个数据元素,e保存其值</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    LinkList p <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为头结点</span>    LinkList q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//q保存为要删除的节点 </span>    <span class="token comment" spellcheck="true">//1.找到第i个数据元素</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历寻找第i个元素 </span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token operator">||</span> j<span class="token operator">></span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.删除操作 </span>     q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>     p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>     <span class="token operator">*</span>e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除的数据给e </span>     <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放q的内存空间 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-遍历线性表"><a href="#9-遍历线性表" class="headerlink" title="9.遍历线性表"></a>9.遍历线性表</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向第一个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-头插法"><a href="#10-头插法" class="headerlink" title="10.头插法"></a>10.头插法</h4><p>建立带头节点的单链表L,插入n,n-1,n-1,…2,1,0 </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateListHead</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/*  先建立一个带头结点的单链表 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  生成新结点 */</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> i<span class="token punctuation">;</span>                    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/*  插入到表头 */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-尾插法"><a href="#11-尾插法" class="headerlink" title="11.尾插法"></a>11.尾插法</h4><p>建立带头节点的单链表L,插入0,1,2，….n-1,n </p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateListTail</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* L为整个线性表 */</span>    r<span class="token operator">=</span><span class="token operator">*</span>L<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">/* r为指向尾部的结点 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  生成新结点 */</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> i<span class="token punctuation">;</span>                  r<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/* 将表尾终端结点的指针指向新结点 */</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">/* 将当前的新结点定义为表尾终端结点 */</span>    <span class="token punctuation">}</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/* 表示当前链表结束 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li><p>单链表插入、删除时间复杂度为O(1),顺序存储为O(n)</p></li><li><p>单链表不需要空间分配的问题，表长不受限制</p></li></ul><p> <a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表之顺序存储</title>
      <link href="/posts/43013.html"/>
      <url>/posts/43013.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-顺序存储结构"><a href="#1-顺序存储结构" class="headerlink" title="1.顺序存储结构"></a>1.顺序存储结构</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这里设置为int类型 </span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 20     </span><span class="token comment" spellcheck="true">//定义线性表最大存储空间 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组存储 </span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//线性表长度 </span><span class="token punctuation">}</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-初始化线性表"><a href="#2-初始化线性表" class="headerlink" title="2.初始化线性表"></a>2.初始化线性表</h4><pre class="line-numbers language-C"><code class="language-C">Status InitList(SqList *L) {    L->length=0;  //设置其线性表长度为0     return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-判断是否为空表"><a href="#3-判断是否为空表" class="headerlink" title="3.判断是否为空表"></a>3.判断是否为空表</h4><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">isEmpty</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是空表，返回true </span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-求线性表的长度"><a href="#4-求线性表的长度" class="headerlink" title="4.求线性表的长度"></a>4.求线性表的长度</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-获取第i个位置的元素"><a href="#5-获取第i个位置的元素" class="headerlink" title="5.获取第i个位置的元素"></a>5.获取第i个位置的元素</h4><p>用e存储线性表L中第i个数据元素的值,注意i是指位置，第1个位置的数组是从0开始，所以返回数组的下标[i-1]。</p><pre class="line-numbers language-C"><code class="language-C">Status GetElem(SqList L, int i, ElemType *e){    if(L.length==0 || i<1 || i>L.length)        return ERROR;    *e = L.data[i-1]; //e保存的是元素值     return OK;    } <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-查找e元素所在的位置"><a href="#6-查找e元素所在的位置" class="headerlink" title="6.查找e元素所在的位置"></a>6.查找e元素所在的位置</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Find_pos</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不存在，返回0 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回位置i+1 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-第i个位置插入元素"><a href="#7-第i个位置插入元素" class="headerlink" title="7.第i个位置插入元素"></a>7.第i个位置插入元素</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入校验</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> MaxSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线性表已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置不符合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插入的位置不在表尾</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>             L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将要插入位置[i-1]之后的所有元素往后移动1个位置 </span>    <span class="token punctuation">}</span>     L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入新元素 </span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//长度+1 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-删除第i个位置的元素"><a href="#8-删除第i个位置的元素" class="headerlink" title="8.删除第i个位置的元素"></a>8.删除第i个位置的元素</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"位置不符合\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从要删除位置[i]起，之后的元素往前移动一个位置 </span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//长度-1 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-遍历线性表"><a href="#9-遍历线性表" class="headerlink" title="9.遍历线性表"></a>9.遍历线性表</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Traverse</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-合并两张线性表"><a href="#10-合并两张线性表" class="headerlink" title="10.合并两张线性表"></a>10.合并两张线性表</h4><p>不使用第三张表，将Lb表拼接到La表的后面。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">union_L</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>La<span class="token punctuation">,</span>SqList Lb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> La_len<span class="token punctuation">,</span>Lb_len<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    La_len <span class="token operator">=</span> <span class="token function">ListLength</span><span class="token punctuation">(</span><span class="token operator">*</span>La<span class="token punctuation">)</span><span class="token punctuation">;</span>    Lb_len <span class="token operator">=</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>Lb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>Lb_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Lb第i个位置上的元素e</span>        <span class="token function">GetElem</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//插入到表a的后面</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span><span class="token operator">++</span>La_len<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>可以快速存储任意位置的元素，实现随机存储</li><li>不需要考虑表中数据的逻辑关系而添加额外的存储空间</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li><p>插入删除移动的元素过多</p></li><li><p>存储空间固定</p><p><a href="https://github.com/yanghuaigang666/DataStructure" target="_blank" rel="noopener">完整代码</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地项目上传到github</title>
      <link href="/posts/31788.html"/>
      <url>/posts/31788.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1 安装git"></a>1 安装git</h3><p> <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a></p><h3 id="2-上传项目"><a href="#2-上传项目" class="headerlink" title="2 上传项目"></a>2 上传项目</h3><p>前提配置好SSH公钥</p><p>在自己的项目文件夹，右击打开:Git Bash Here</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/yanghuaigang666/Blog.git   <span class="token comment" spellcheck="true"># openSSH界面，输入github的账号，密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/posts/31788/1.png" alt=""></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现项目下多了一个<code>.git</code>文件目录   </p><p><img src="/posts/31788/2.png" alt=""></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此操作是把项目文件夹下面新的文件或修改过的文件添加进来，如果有的文件之前已经添加了，它会自动省略</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p> git commit 后面加 -m 表示可以直接输入提交说明，一般添加一些你修改文件信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"logs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/31788/3.png" alt=""></p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>本地仓库关联到GitHub</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin https://github.com/yanghuaigang666/Blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第六步-可选"><a href="#第六步-可选" class="headerlink" title="第六步(可选)"></a>第六步(可选)</h4><p>代码合并</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h4><p>此操作目的是把本地仓库push到github上面，此步骤需要你输入登录github上的帐号和密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-更新项目"><a href="#3-更新项目" class="headerlink" title="3 更新项目"></a>3 更新项目</h3><p>当以后需要更新项目的时候有四步需要走  </p><ul><li><p>第一步：执行<code>git pull</code>命令将GitHub上的代码当下来合并代码，防止提交新代码的时候起冲突</p></li><li><p>第二步：执行<code>git add</code>命令将代码添加到仓库</p></li><li><p>第三步：执行<code>git commit</code>命令将代码提交到仓库</p></li><li><p>第四步：执行<code>git push</code>命令将代码提交到GitHub</p><p><img src="/posts/31788/4.jpg" alt=""></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>property属性</title>
      <link href="/posts/49650.html"/>
      <url>/posts/49650.html</url>
      
        <content type="html"><![CDATA[<p>本文描述的是python面向对象中的property属性。主要介绍property属性的两种定义方式：装饰器与类属性，以及怎么来调用，在实际开发过程中的应用场景。</p><p><img src="/posts/49650/coding.jpg" alt=""> </p><h2 id="1-什么是property属性"><a href="#1-什么是property属性" class="headerlink" title="1 什么是property属性"></a>1 什么是property属性</h2><p>类似于实例属性的一种特殊属性，可以对应于某个方法   </p><pre class="line-numbers language-python"><code class="language-python">     <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>          <span class="token comment" spellcheck="true"># 定义property属性</span>      @property        <span class="token keyword">def</span> <span class="token function">prop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>       foo_obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>       foo_obj<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用实例方法   </span>    foo_obj<span class="token punctuation">.</span>prop  <span class="token comment" spellcheck="true"># 调用property属性   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/49650/1.png" alt="">   </p><p>property属性的定义和调用要注意一下几点：</p><ul><li><p>定义时，在实例方法的基础上添加 @property 装饰器；<strong>并且仅有一个self参数</strong></p></li><li><p>调用时，无需括号    </p><p>  方法：foo_obj.func()<br>  property属性：foo_obj.prop</p></li></ul><h3 id="1-1-简单的实例"><a href="#1-1-简单的实例" class="headerlink" title="1.1 简单的实例"></a>1.1 简单的实例</h3><blockquote><p>对于京东商城中显示电脑主机的列表页面，每次请求不可能把数据库中的所有内容都显示到页<br>面上，而是通过分页的功能局部显示，所以在向数据库中请求数据时就要显示的指定获取从第m条到第n条的所有数据 这个分页的功能包括：</p></blockquote><ul><li>根据用户请求的当前页和总数据条数计算出 m 和 n   </li><li>根据m 和 n 去数据库中请求数据</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ############### 定义 ###############</span><span class="token keyword">class</span> <span class="token class-name">Pager</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> current_page<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用户当前请求的页码（第一页、第二页...）</span>        self<span class="token punctuation">.</span>current_page <span class="token operator">=</span> current_page        <span class="token comment" spellcheck="true"># 每页默认显示10条数据</span>        self<span class="token punctuation">.</span>per_items <span class="token operator">=</span> <span class="token number">10</span>     @property    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>current_page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>per_items        <span class="token keyword">return</span> val    @property    <span class="token keyword">def</span> <span class="token function">end</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> self<span class="token punctuation">.</span>current_page <span class="token operator">*</span> self<span class="token punctuation">.</span>per_items        <span class="token keyword">return</span> val<span class="token comment" spellcheck="true"># ############### 调用 ###############</span>p <span class="token operator">=</span> Pager<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>start  <span class="token comment" spellcheck="true"># 就是起始值，即：m</span>p<span class="token punctuation">.</span>end  <span class="token comment" spellcheck="true"># 就是结束值，即：n ```</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-小结"><a href="#1-2-小结" class="headerlink" title="1.2 小结"></a>1.2 小结</h3><p>Python的property属性的功能是：property属性内部进行一系列的逻辑计算，最终将计算结果返回。</p><h2 id="2-property属性的有两种方式"><a href="#2-property属性的有两种方式" class="headerlink" title="2 property属性的有两种方式"></a>2 property属性的有两种方式</h2><ol><li>装饰器 即：在方法上应用装饰器</li><li>类属性 即：在类中定义值为property对象的类属性</li></ol><h3 id="2-1装饰器方式"><a href="#2-1装饰器方式" class="headerlink" title="2.1装饰器方式"></a>2.1装饰器方式</h3><p>在类的实例方法上应用@property装饰器，<br>在python2的经典类与python3的新式类又有区别：</p><h4 id="2-1-1-经典类实现–只有一种-property装饰器"><a href="#2-1-1-经典类实现–只有一种-property装饰器" class="headerlink" title="2.1.1 经典类实现–只有一种@property装饰器"></a>2.1.1 经典类实现–只有一种@property装饰器</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ############### 定义 ###############    </span><span class="token keyword">class</span> <span class="token class-name">Goods</span><span class="token punctuation">:</span>    @property    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"laowang"</span><span class="token comment" spellcheck="true"># ############### 调用 ###############</span>obj <span class="token operator">=</span> Goods<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> obj<span class="token punctuation">.</span>price  <span class="token comment" spellcheck="true"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-新式类–具有三种-property装饰器"><a href="#2-1-2-新式类–具有三种-property装饰器" class="headerlink" title="2.1.2 新式类–具有三种@property装饰器"></a>2.1.2 新式类–具有三种@property装饰器</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token comment" spellcheck="true"># ############### 定义 ###############</span><span class="token keyword">class</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""python3中默认继承object类        以python2、3执行此程序的结果不同，因为只有在python3中才有@xxx.setter  @xxx.deleter    """</span>    @property    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'@property'</span><span class="token punctuation">)</span>    @price<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'@price.setter'</span><span class="token punctuation">)</span>    @price<span class="token punctuation">.</span>deleter    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'@price.deleter'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ############### 调用 ###############</span>obj <span class="token operator">=</span> Goods<span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>price          <span class="token comment" spellcheck="true"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span>obj<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">123</span>    <span class="token comment" spellcheck="true"># 自动执行 @price.setter 修饰的 price 方法，并将  123 赋值给方法的参数</span><span class="token keyword">del</span> obj<span class="token punctuation">.</span>price      <span class="token comment" spellcheck="true"># 自动执行 @price.deleter 修饰的 price 方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-3-实例（商品打折问题）"><a href="#2-1-3-实例（商品打折问题）" class="headerlink" title="2.1.3 实例（商品打折问题）"></a>2.1.3 实例（商品打折问题）</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 原价</span>        self<span class="token punctuation">.</span>original_price <span class="token operator">=</span> <span class="token number">100</span>        <span class="token comment" spellcheck="true"># 折扣</span>        self<span class="token punctuation">.</span>discount <span class="token operator">=</span> <span class="token number">0.8</span>    @property    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实际价格 = 原价 * 折扣</span>        new_price <span class="token operator">=</span> self<span class="token punctuation">.</span>original_price <span class="token operator">*</span> self<span class="token punctuation">.</span>discount        <span class="token keyword">return</span> new_price    @price<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>original_price <span class="token operator">=</span> value    @price<span class="token punctuation">.</span>deleter    <span class="token keyword">def</span> <span class="token function">price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>original_priceobj <span class="token operator">=</span> Goods<span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>price         <span class="token comment" spellcheck="true"># 获取商品价格</span>obj<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">200</span>   <span class="token comment" spellcheck="true"># 修改商品原价</span><span class="token keyword">del</span> obj<span class="token punctuation">.</span>price     <span class="token comment" spellcheck="true"># 删除商品原价</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-类属性方式，创建值为property对象的类属性"><a href="#2-2-类属性方式，创建值为property对象的类属性" class="headerlink" title="2.2 类属性方式，创建值为property对象的类属性"></a>2.2 类属性方式，创建值为property对象的类属性</h3><p>当使用类属性的方式创建property属性时，经典类和新式类无区别</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_bar</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'laowang'</span>    BAR <span class="token operator">=</span> property<span class="token punctuation">(</span>get_bar<span class="token punctuation">)</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>reuslt <span class="token operator">=</span> obj<span class="token punctuation">.</span>BAR  <span class="token comment" spellcheck="true"># 自动调用get_bar方法，并获取方法的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>reuslt<span class="token punctuation">)</span>```property方法中有个四个参数<span class="token operator">-</span>    第一个参数是方法名，调用 对象<span class="token punctuation">.</span>属性 时自动触发执行方法<span class="token operator">-</span>    第二个参数是方法名，调用 对象<span class="token punctuation">.</span>属性 ＝ XXX 时自动触发执行方法<span class="token operator">-</span>    第三个参数是方法名，调用 <span class="token keyword">del</span> 对象<span class="token punctuation">.</span>属性 时自动触发执行方法<span class="token operator">-</span>    第四个参数是字符串，调用 对象<span class="token punctuation">.</span>属性<span class="token punctuation">.</span>__doc__ ，此参数是该属性的描述信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1-实例（商品打折）"><a href="#2-2-1-实例（商品打折）" class="headerlink" title="2.2.1 实例（商品打折）"></a>2.2.1 实例（商品打折）</h4><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">class</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 原价</span>        self<span class="token punctuation">.</span>original_price <span class="token operator">=</span> <span class="token number">100</span>        <span class="token comment" spellcheck="true"># 折扣</span>        self<span class="token punctuation">.</span>discount <span class="token operator">=</span> <span class="token number">0.8</span>    <span class="token keyword">def</span> <span class="token function">get_price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实际价格 = 原价 * 折扣</span>        new_price <span class="token operator">=</span> self<span class="token punctuation">.</span>original_price <span class="token operator">*</span> self<span class="token punctuation">.</span>discount        <span class="token keyword">return</span> new_price    <span class="token keyword">def</span> <span class="token function">set_price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>original_price <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">del_price</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>original_price    PRICE <span class="token operator">=</span> property<span class="token punctuation">(</span>get_price<span class="token punctuation">,</span> set_price<span class="token punctuation">,</span> del_price<span class="token punctuation">,</span> <span class="token string">'价格属性描述...'</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> Goods<span class="token punctuation">(</span><span class="token punctuation">)</span>    obj<span class="token punctuation">.</span>PRICE         <span class="token comment" spellcheck="true"># 获取商品价格</span>    obj<span class="token punctuation">.</span>PRICE <span class="token operator">=</span> <span class="token number">200</span>   <span class="token comment" spellcheck="true"># 修改商品原价</span>    <span class="token keyword">del</span> obj<span class="token punctuation">.</span>PRICE     <span class="token comment" spellcheck="true"># 删除商品原价```</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-property属性的应用"><a href="#3-property属性的应用" class="headerlink" title="3 property属性的应用"></a>3 property属性的应用</h2><h4 id="3-1-普通的语言（c-，c-，Java）实现get-set-方式"><a href="#3-1-普通的语言（c-，c-，Java）实现get-set-方式" class="headerlink" title="3.1 普通的语言（c#，c++，Java）实现get(),set()方式"></a>3.1 普通的语言（c#，c++，Java）实现get(),set()方式</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>__money <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">getMoney</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>__money<span class="token keyword">def</span> <span class="token function">setMoney</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> value    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error:不是整型数字"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Money<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>getMoney<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用setMoney方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>setMoney<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-使用property属性实现get-set-方式"><a href="#3-2-使用property属性实现get-set-方式" class="headerlink" title="3.2 使用property属性实现get(),set()方式"></a>3.2 使用property属性实现get(),set()方式</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>__money <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">getMoney</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>__money<span class="token keyword">def</span> <span class="token function">setMoney</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> value    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error:不是整型数字"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个属性，当对这个money设置值时调用setMoney,当获取值时调用getMoney</span>money <span class="token operator">=</span> property<span class="token punctuation">(</span>getMoney<span class="token punctuation">,</span> setMoney<span class="token punctuation">)</span>  a <span class="token operator">=</span> Money<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>money <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment" spellcheck="true"># 调用setMoney方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>money<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用getMoney方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比以上两种方式，很类似，但我认为加上property属性的代码可读性更强，因为不用在调用的时候考虑是否传参的问题。</strong></p><p>以下是用装饰器方式修改以上代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 使用装饰器对money进行装饰，那么会自动添加一个叫money的属性，当调用获取money的值时，调用装饰的方法</span>@property<span class="token keyword">def</span> <span class="token function">money</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>__money<span class="token comment" spellcheck="true"># 使用装饰器对money进行装饰，当对money设置值时，调用装饰的方法</span>@money<span class="token punctuation">.</span>setter<span class="token keyword">def</span> <span class="token function">money</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> value    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error:不是整型数字"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Money<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>money <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>money<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>在以后的开发过程中，尽量使用类属性的方式来使用property属性，因为在WEB框架 Django 的视图中 request.POST 就是使用的类属性的方式创建的属性。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的blog搭建教程(二)</title>
      <link href="/posts/10762.html"/>
      <url>/posts/10762.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍hexo主题yilia的使用以及优化，使你的blog变得好看</p><p><img src="/posts/10762/head2.png" alt="图片"> </p><h3 id="1-安装yilia"><a href="#1-安装yilia" class="headerlink" title="1.安装yilia"></a>1.安装yilia</h3><pre><code>git clone http://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><h3 id="2-使用yilia"><a href="#2-使用yilia" class="headerlink" title="2.使用yilia"></a>2.使用yilia</h3><p>修改站点配置文件 _config.yml，修改为如下代码： <code>theme: yilia</code></p><h3 id="3-查看所有文章，提示缺失模块"><a href="#3-查看所有文章，提示缺失模块" class="headerlink" title="3.查看所有文章，提示缺失模块"></a>3.查看所有文章，提示缺失模块</h3><p><img src="/posts/10762/%E7%BC%BA%E5%A4%B1%E6%A8%A1%E5%9D%97%E7%9A%84%E5%9B%BE%E7%89%87.png" alt="缺失模块的图片"><br>按照提示，去完成步骤,注意_config.yml 路径是指 根目录下的，而非 yilia 主题下的 config文件</p><h3 id="4-配置图片资源"><a href="#4-配置图片资源" class="headerlink" title="4.配置图片资源"></a>4.配置图片资源</h3><ol><li>添加图片资源文件夹。 路径为 themes/yilia/source/下，可添加一个 assets 文件夹，里面存放图片资源即可  </li><li>配置文件中直接引用即可。路径为 themes/yilia/_config.yml，找到如下即可<blockquote><p>微信二维码图片<br>weixin:  /assets/img/wechat.png</p></blockquote></li></ol><blockquote><p>头像图片<br>avatar:  /assets/img/head.jpg</p></blockquote><blockquote><p>网页图标<br>favicon:  /assets/img/head.jpg</p></blockquote><h3 id="5-文章如何显示摘要"><a href="#5-文章如何显示摘要" class="headerlink" title="5.文章如何显示摘要"></a>5.文章如何显示摘要</h3><pre><code>问题:点击主页时，发现所有文章都是全文显示，不利于查找，可控制显示的字数解决办法: 在你 MD 格式文章正文插入 &lt;!-- more--&gt;即可，只会显示它之前的，此后的就不显示，点击文章标题，全文阅读才可看到，同时注释掉以下 themes/yilia/_config.yml，            # excerpt_link: more</code></pre><h3 id="6-微信分享文章异常"><a href="#6-微信分享文章异常" class="headerlink" title="6.微信分享文章异常"></a>6.微信分享文章异常</h3><h3 id="7-所有文章无法显示"><a href="#7-所有文章无法显示" class="headerlink" title="7.所有文章无法显示"></a>7.所有文章无法显示</h3><p>themes\yilia\ _config.yml文件里面的<code>mathjax: true</code>改为<code>mathjax: true</code></p><h3 id="8-在左侧显示总文章数"><a href="#8-在左侧显示总文章数" class="headerlink" title="8.在左侧显示总文章数"></a>8.在左侧显示总文章数</h3><p>将themes\yilia\layout_partial\left-col.ejs文件的</p><pre><code>&lt;nav class="header-menu"&gt;    &lt;ul&gt;    &lt;% for (var i in theme.menu){ %&gt;        &lt;li&gt;&lt;a href="&lt;%- url_for(theme.menu[i]) %&gt;"&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt;    &lt;%}%&gt;    &lt;/ul&gt;&lt;/nav&gt;</code></pre><p>加上这个：</p><pre><code>&lt;nav&gt;    总文章数 &lt;%=site.posts.length%&gt;&lt;/nav&gt;</code></pre><h3 id="9-怎么置顶文章"><a href="#9-怎么置顶文章" class="headerlink" title="9.怎么置顶文章"></a>9.怎么置顶文章</h3><p>1.安装插件 </p><pre><code>npm uninstall hexo-generator-index --save  npm install hexo-generator-index-pin-top --save</code></pre><p>2.配置置顶标准<br>打开：/themes/*/layout（/_macro）/post.ejs 直接在最前面加入以下代码即可   </p><pre><code>&lt;% if (page.top) { %&gt;  &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt;  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;  &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&lt;% } %&gt;</code></pre><p>3.配置文章<br>然后在需要置顶的文章的Front-matter中加上top选项即可 top后面的数字越大，优先级越高</p><pre><code>title: 2019    date: 2019-02-14 16:10:03   top: 5   </code></pre><h3 id="10-修改代码块样式"><a href="#10-修改代码块样式" class="headerlink" title="10.修改代码块样式"></a>10.修改代码块样式</h3><p>直接修改编译好的文件。路径为： <code>theme/yilia/source/main.0cf68a.css</code></p><ul><li><p>修改代码背景色，  搜索 .article-entry .highlight, 修改background后面的颜色<code>pre{background:#272822;</code>改为<br><code>pre{background:#1a0139;</code></p></li><li><p>修改行号颜色，搜索 .article-entry .highlight .gutter pre .line将<code>.article-entry .highlight .gutter pre .line{color:#666</code>改为 <code>.article-entry .highlight .gutter pre .line{color:#fc0000</code></p></li><li><p>修改代码字体颜色<code>article-entry .highlight .line{color:#fff;</code>修改为<code>.article-entry .highlight .line{color:#00ff0d;</code>将<code>white-space:pre-wrap;</code> 删除.这个问题是自动换行造成的，使用不自动换行的<code>white-space:pre</code>;样式代码块部分会自动出现底部滚动条，行号错乱问题就没有了。</p></li></ul><h3 id="11-文章显示目录"><a href="#11-文章显示目录" class="headerlink" title="11.文章显示目录"></a>11.文章显示目录</h3><p>增加文章目录 TOC(table of content )，方便阅读文章, 在 themes/yilia/_config.ym中进行配置 toc: 2即可，它会将你 Markdown 语法的标题，生成目录，目录查看在右下角。</p><h3 id="12-添加菜单"><a href="#12-添加菜单" class="headerlink" title="12.添加菜单"></a>12.添加菜单</h3><p>修改 themes/yilia/_config.yml<br>    menu:<br>      个人主页: /<br>      生活随笔: /tags/随笔/<br>      学习笔记: /tags/笔记/<br>      所有文章: /archives/index.html</p><h3 id="13-添加不蒜子统计"><a href="#13-添加不蒜子统计" class="headerlink" title="13.添加不蒜子统计"></a>13.添加不蒜子统计</h3><p>利用这个统计，可以知道你博客的访问量，访客数<br>修改 themes\yilia\layout_partial\footer.ejs，包括访客数和站点访问总量  </p><pre><code>&lt;span id="busuanzi_container_site_pv"&gt;  &lt;i class="icon ion-pie-graph"&gt;&lt;/i&gt;  访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt; &lt;i class="icon ion-person"&gt;&lt;/i&gt; 访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;&lt;/span&gt;&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;    </code></pre><p>在需要显示的地方添加</p><pre><code># 使用 pv 记录方式，每访问一次，记录一次&lt;span id="busuanzi_container_page_pv"&gt;  本文总阅读量&lt;span id="busuanzi_value_page_pv"&gt;&lt;/span&gt;次&lt;/span&gt;</code></pre><h3 id="14-添加valine评论系统"><a href="#14-添加valine评论系统" class="headerlink" title="14.添加valine评论系统"></a>14.添加valine评论系统</h3><p> 参考一下：<a href="https://blog.csdn.net/qq_43827595/article/details/101450966" target="_blank" rel="noopener" title="csdn">https://blog.csdn.net/qq_43827595/article/details/101450966</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总之，yilia还可以优化，可以添加丰富的插件，比如，添加看板娘，天气预报，网易云音乐等。其他的可以网上搜索完善就行了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> yilia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIL</title>
      <link href="/posts/28806.html"/>
      <url>/posts/28806.html</url>
      
        <content type="html"><![CDATA[<p>这几天学习python多线程与多进程的时候，学习到了一个关于GIL（全局解释器锁）的相关东西，本文简单描述了一下为何有GIL，以及遇到GIL怎么解决他</p><a id="more"></a><h2 id="1-背景："><a href="#1-背景：" class="headerlink" title="1.背景："></a>1.背景：</h2><ul><li>单核cpu时，两个多线程同时执行死循环，此时cpu会被充分利用（good）<br><img src="/posts/28806/%E5%8D%95%E6%A0%B8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AD%BB%E5%BE%AA%E7%8E%AF.jpg" alt="单核多线程"></li><li>双核cpu时，两个多线程同时执行死循环，此时cpu会被不充分利用（bad）<br><img src="/posts/28806/%E4%B8%A4%E6%A0%B8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AD%BB%E5%BE%AA%E7%8E%AF.jpg" alt="双核多线程"></li><li>双核cpu时，两个多进程同时执行死循环，此时cpu会被会充分利用<br><img src="/posts/28806/%E4%B8%A4%E6%A0%B8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%AD%BB%E5%BE%AA%E7%8E%AF.jpg" alt="双核多进程"></li></ul><h2 id="2-什么是GIL"><a href="#2-什么是GIL" class="headerlink" title="2.什么是GIL"></a>2.什么是GIL</h2><p>GIL（Global Interpreter Lock）全局解释器锁： 每个线程在cpu中执行时，都要先上GIL，保证同一时刻只有一个线程在执行，也就是说，同一时刻只有一个线程在cpu上执行；不是真正意义上的多线程同时执行</p><p>python的发明者，只考虑当时的单核cpu，解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁， 于是有了GIL这把超级大锁。因为cpython解析只允许拥有GIL全局解析器锁才能运行程序，这样就保证了保证同一个时刻只允许一个线程可以使用cpu。所以就产生了多线程执行程序的速度不快，反而多进程比多线性还快，</p><h2 id="3-释放GIL有两种情形："><a href="#3-释放GIL有两种情形：" class="headerlink" title="3.释放GIL有两种情形："></a>3.释放GIL有两种情形：</h2><ol><li>遇到IO操作时，线程会释放GIL</li><li>会有一个专门ticks进行计数 一旦ticks数值达到100 这个时候释放Gil锁</li></ol><h2 id="4-如何解决GIL的问题："><a href="#4-如何解决GIL的问题：" class="headerlink" title="4.如何解决GIL的问题："></a>4.如何解决GIL的问题：</h2><ol><li>更换cpython解释器</li><li>使用多进程代替多线程</li><li>在使用多线程可以使用c语言去实现</li></ol><h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><ul><li>程序分为计算密集型，和io密集型   <ul><li>计算密集型程序———–&gt;建议使用多进程  </li><li>io密集型程序————–&gt;建议使用多线程，协程  </li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影楼设计_1</title>
      <link href="/posts/47483.html"/>
      <url>/posts/47483.html</url>
      
        <content type="html"><![CDATA[<p><strong>主要内容：</strong><br>了解Raw格式 ; 运用图片软件对Raw照片进行处理;2345看图王使用;直方图,曝光,色调色温。</p><a id="more"></a><h1 id="认识RAW修图基础知识"><a href="#认识RAW修图基础知识" class="headerlink" title="认识RAW修图基础知识"></a>认识RAW修图基础知识</h1><h2 id="1-了解Raw格式"><a href="#1-了解Raw格式" class="headerlink" title="1. 了解Raw格式"></a>1. 了解Raw格式</h2><ul><li>图片格式： BMP JPG PNG GIF ROW  </li></ul><ul><li>raw格式就是各种相机拍摄的最原始的照片</li><li>不可逆性     </li></ul><h2 id="2-运用图片软件对Raw照片进行处理"><a href="#2-运用图片软件对Raw照片进行处理" class="headerlink" title="2. 运用图片软件对Raw照片进行处理"></a>2. 运用图片软件对Raw照片进行处理</h2><ul><li>色彩空间:  Adobe RGB , sRGB 前者的包含的色彩包含后者 </li><li>网络传输用jpg格式，照片冲洗用tiff格式  </li><li>解raw软件  <blockquote><ol><li>佳能自带简介快速（DPP）</li><li>尼康自带</li><li>Adobe Lightroom 软件</li><li>Adobe Camera Raw 万能ps内置插件 </li></ol></blockquote></li></ul><h2 id="3-2345看图王使用"><a href="#3-2345看图王使用" class="headerlink" title="3. 2345看图王使用"></a>3. 2345看图王使用</h2><p>   <strong>批量处理图片</strong></p><h2 id="4-直方图-曝光-色调色温"><a href="#4-直方图-曝光-色调色温" class="headerlink" title="4. 直方图 曝光 色调色温"></a>4. 直方图 曝光 色调色温</h2><p>   <strong>直方图：</strong>一张图片的色彩明暗分布<br>   <strong>色彩构成：</strong>好的明暗关系，对比关系才有好的色彩</p><hr><p> <strong>构图法:</strong><br>    1. <a href="http://q39yg8fyw.bkt.clouddn.com/三分法.png" target="_blank" rel="noopener" title="三分构图法_1">http://q39yg8fyw.bkt.clouddn.com/三分法.png</a><br>    2. <a href="http://q39yg8fyw.bkt.clouddn.com/三分法构图.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/三分法构图.png</a><br>    3. <a href="http://q39yg8fyw.bkt.clouddn.com/中心构图.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/中心构图.png</a><br>    4. <a href="http://q39yg8fyw.bkt.clouddn.com/平衡构图法.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/平衡构图法.png</a><br>    5. <a href="http://q39yg8fyw.bkt.clouddn.com/斐波拉契曲线.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/斐波拉契曲线.png</a><br>    6. <a href="http://q39yg8fyw.bkt.clouddn.com/点，线，面.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/点，线，面.png</a><br><strong>直方图:</strong><br>    <a href="http://q39yg8fyw.bkt.clouddn.com/直方图.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/直方图.png</a><br><strong>孟赛尔颜色系统</strong><br>    <a href="http://q39yg8fyw.bkt.clouddn.com/孟赛尔颜色系统.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/孟赛尔颜色系统.png</a><br><strong>三原色</strong><br>    <a href="http://q39yg8fyw.bkt.clouddn.com/三原色.png" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/三原色.png</a><br><strong>各种raw格式</strong><br>    <a href="http://q39yg8fyw.bkt.clouddn.com/各种raw格式" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/各种raw格式</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四级听力技巧</title>
      <link href="/posts/736.html"/>
      <url>/posts/736.html</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍的有关于英语四级的听力技巧，帮助大家在四级英语考试中，把听力的得分占比拉高一点，希望大家都能过线！</p><a id="more"></a><p>##常用连词总结</p><ol><li>表示列举和次序：<pre class="line-numbers language-First,firstly,"><code class="language-First,firstly,">first of all,to begin/startwith,in the first place,for another,finally,last but not least<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>表示递进：<br><code>Besides,what’s more,moreover</code>,<br><code>furthermore,in addition,more importantly,most importantly</code></li><li>表示举例：<br><code>For example,for instance,take…as an example,as an illustration,to illustration,such as(介词)…</code></li><li>表示对比：<br><code>Similarly,likewise,in the same way,on the contrary,in contrast,by contrast,on the other hand,while/whereas(连词)</code></li><li>表示让步：<br><code>Though/although(连词),even though(连词),</code><br><code>in spite of(介词),</code><br><code>despite(介词)</code>,it is true that(连词),<code></code>admittedly(承然的),`</li><li>表示转折：<br><code>But,yet,however,nevertheless,instead</code></li><li>表示原因：<br>Because(介),as(连),since(连),for(连),because of(介词),owing to(介),due to(介),as a result of(介)</li><li>表示结果：<br>So(连),thus,consequently,hence,therefore,accordingly,as a result,as a consequent</li><li>表示强调：<br>In fact,actually,indeed,especially,particularly,in particular</li><li>表示总结：<br>In conclusion,in short,in brief,in summary,on the whole,to sum up,to conclude,all in all,in a word</li></ol><hr><p>##四级听力解题技巧</p><ol><li>长对话答题技巧<ul><li>预览选项——大致内容</li><li>整体理解——不抓每一个字</li><li>听清开头——主旨所在</li><li>注意问答——疑问句之后，答句容易出题</li><li>抓中心词——2次以上重复出现</li></ul></li></ol><ul><li>记录数字——准确</li><li>回忆内容——归纳推理，已知–&gt;未知</li></ul><ol start="2"><li>篇章听力做题技巧<blockquote><p>阅读选项——文章内容，注意区分主要信息与次要信息，注意篇章首尾句，时间状语从句，地点状语从句，转折处，最高级，疑问句<br>不同题材——故事，叙述材料，议论文—主题思想<br>顺序驱动——听什么，选什么；注意同义转换</p></blockquote></li><li>讲座听力解题技巧<ul><li>预览选项——大致内容</li><li>听清讲座开头——主题</li><li>把握讲座主旨——</li></ul></li></ol><blockquote><p>What did the speaker want to tell us in this lecture?<br>What is the speaker mainly talking about?<br>What is the lecture mainly about?</p></blockquote><ul><li>注意连接词</li><li>记录关键信息</li><li>平时注重泛听</li><li>精听六级听力真题</li></ul><p><img src="/posts/736/%E5%9B%9B%E5%85%AD%E7%BA%A7%E5%BF%85%E8%83%9C.jpg" alt="四六级必胜"></p><p><a href="http://q39yg8fyw.bkt.clouddn.com/03256_whitesand_1920x1080.jpg" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/03256_whitesand_1920x1080.jpg</a></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6级听力解答技巧</title>
      <link href="/posts/6718.html"/>
      <url>/posts/6718.html</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍的有关于英语六级的听力技巧，帮助大家在六级英语考试中，把听力的得分占比拉高一点，希望大家都能过线！</p><a id="more"></a><h2 id="常用连词总结"><a href="#常用连词总结" class="headerlink" title="常用连词总结"></a>常用连词总结</h2><ol><li>表示列举和次序：<pre class="line-numbers language-First,firstly,"><code class="language-First,firstly,">first of all,to begin/startwith,in the first place,for another,finally,last but not least<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>表示递进：<br><code>Besides,what’s more,moreover</code>,<br><code>furthermore,in addition,more importantly,most importantly</code></li><li>表示举例：<br><code>For example,for instance,take…as an example,as an illustration,to illustration,such as(介词)…</code></li><li>表示对比：<br><code>Similarly,likewise,in the same way,on the contrary,in contrast,by contrast,on the other hand,while/whereas(连词)</code></li><li>表示让步：<br><code>Though/although(连词),even though(连词),</code><br><code>in spite of(介词),</code><br><code>despite(介词)</code>,it is true that(连词),<code></code>admittedly(承然的),`</li><li>表示转折：<br><code>But,yet,however,nevertheless,instead</code></li><li>表示原因：<br>Because(介),as(连),since(连),for(连),because of(介词),owing to(介),due to(介),as a result of(介)</li><li>表示结果：<br>So(连),thus,consequently,hence,therefore,accordingly,as a result,as a consequent</li><li>表示强调：<br>In fact,actually,indeed,especially,particularly,in particular</li><li>表示总结：<br>In conclusion,in short,in brief,in summary,on the whole,to sum up,to conclude,all in all,in a word</li></ol><hr><p>##6级听力解题技巧</p><ol><li>长对话答题技巧<ul><li>预览选项——大致内容</li><li>整体理解——不抓每一个字</li><li>听清开头——主旨所在</li><li>注意问答——疑问句之后，答句容易出题</li><li>抓中心词——2次以上重复出现</li></ul></li></ol><ul><li>记录数字——准确</li><li>回忆内容——归纳推理，已知–&gt;未知</li></ul><ol start="2"><li>篇章听力做题技巧<blockquote><p>阅读选项——文章内容，注意区分主要信息与次要信息，注意篇章首尾句，时间状语从句，地点状语从句，转折处，最高级，疑问句<br>不同题材——故事，叙述材料，议论文—主题思想<br>顺序驱动——听什么，选什么；注意同义转换</p></blockquote></li><li>讲座听力解题技巧<ul><li>预览选项——大致内容</li><li>听清讲座开头——主题</li><li>把握讲座主旨——</li></ul></li></ol><blockquote><p>What did the speaker want to tell us in this lecture?<br>What is the speaker mainly talking about?<br>What is the lecture mainly about?</p></blockquote><ul><li>注意连接词</li><li>记录关键信息</li><li>平时注重泛听</li><li>精听六级听力真题</li></ul><p><a href="http://q39yg8fyw.bkt.clouddn.com/03256_whitesand_1920x1080.jpg" target="_blank" rel="noopener">http://q39yg8fyw.bkt.clouddn.com/03256_whitesand_1920x1080.jpg</a></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四篇文章</title>
      <link href="/posts/54096.html"/>
      <url>/posts/54096.html</url>
      
        <content type="html"><![CDATA[<p>随着网络的不断发展，国家开始大力支持在线教育模式，相继出现了许多综合性、跨学科的在线作业应用系统，例如，厦门大学的网络教学平台    （<a href="https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。" target="_blank" rel="noopener">https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。</a></p><a id="more"></a><h3 id="1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"><a href="#1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。" class="headerlink" title="1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"></a>1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。</h3><h3 id="2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"><a href="#2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。" class="headerlink" title="2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"></a>2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。</h3><h3 id="3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"><a href="#3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。" class="headerlink" title="3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"></a>3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。</h3><h3 id="4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"><a href="#4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。" class="headerlink" title="4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"></a>4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。</h3><h3 id="5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"><a href="#5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。" class="headerlink" title="5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"></a>5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。</h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第三篇博文</title>
      <link href="/posts/52699.html"/>
      <url>/posts/52699.html</url>
      
        <content type="html"><![CDATA[<p>随着网络的不断发展，国家开始大力支持在线教育模式，相继出现了许多综合性、跨学科的在线作业应用系统，例如，厦门大学的网络教学平台    （<a href="https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。" target="_blank" rel="noopener">https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。</a></p><a id="more"></a><h2 id="二、国内外研究现状"><a href="#二、国内外研究现状" class="headerlink" title="二、国内外研究现状"></a>二、国内外研究现状</h2><blockquote><p>随着网络的不断发展，国家开始大力支持在线教育模式，相继出现了许多综合性、跨学科的在线作业应用系统，例如，厦门大学的网络教学平台    （<a href="https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。" target="_blank" rel="noopener">https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。</a><br>国外最知名的在线课程和作业管理系统[5]有：</p></blockquote><h3 id="1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"><a href="#1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。" class="headerlink" title="1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"></a>1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。</h3><h3 id="2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"><a href="#2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。" class="headerlink" title="2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"></a>2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。</h3><h3 id="3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"><a href="#3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。" class="headerlink" title="3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"></a>3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。</h3><h3 id="4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"><a href="#4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。" class="headerlink" title="4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"></a>4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。</h3><h3 id="5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"><a href="#5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。" class="headerlink" title="5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"></a>5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。</h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第二篇博客</title>
      <link href="/posts/32482.html"/>
      <url>/posts/32482.html</url>
      
        <content type="html"><![CDATA[<p>本文开发一个作业管理系统，系统分为教师端，学生端和管理员端，实现了课程管理，学生管理，作业管理，自定义考试和课程讨论等功能。软件界面灵活，操作简单,系统较好的实现了在线作业的功能，有助于引导学生平时的学习，对老师的课堂教学有一定的辅助作用。</p><a id="more"></a><h2 id="一、选题背景与意义"><a href="#一、选题背景与意义" class="headerlink" title="一、选题背景与意义"></a>一、选题背景与意义</h2><p>在学校日常教学活动中，管理学生作业是必不可少的一个环节，也是学以致用的一种有效途径。在传统的教学中，教师收发作业的形式多种多样：有的教师布置的是纸质作业，学生课后完成后统一上交给老师；有的教师布置的是电子档类的作业，学生通过Email、QQ等手段将作业交给老师，老师批改完成后再发回给学生……然而这些纸质作业、<br>电子档作业存在媒体刺激单一、反馈周期长等缺点，作业的批改和成绩统计需要花费大量的时间。为了减轻老师的作业批改工作量，加强学生与教师之间的交流，从学校的实际需求出发设计了在线作业管理系统，实现作业的在线发布、提交、批改、成绩统计、在线交流等功能。系统运行效果良好，对学生的考核评价新机制进行了有益的尝试。</p><blockquote><p>本文开发一个作业管理系统，系统分为教师端，学生端和管理员端，实现了课程管理，学生管理，作业管理，自定义考试和课程讨论等功能。软件界面灵活，操作简单,系统较好的实现了在线作业的功能，有助于引导学生平时的学习，对老师的课堂教学有一定的辅助作用。<br>本系统采用Python[1]语言和 Redis[2]数据库，运用Django[3]框架进行项目开发，提高编程效率。</p></blockquote><h2 id="二、国内外研究现状"><a href="#二、国内外研究现状" class="headerlink" title="二、国内外研究现状"></a>二、国内外研究现状</h2><blockquote><p>随着网络的不断发展，国家开始大力支持在线教育模式，相继出现了许多综合性、跨学科的在线作业应用系统，例如，厦门大学的网络教学平台    （<a href="https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。" target="_blank" rel="noopener">https://l.xmu.edu.cn/），华南理工大学教学在线系统，清华大学慕课平台等[4]。这些高等院校建设的平台主要针对远程教育的学习方面，并没有大规模的推广使用。即使使用效果不是很明显，不能完全解决学生作业管理过程中遇到的问题。</a><br>国外最知名的在线课程和作业管理系统[5]有：</p></blockquote><h3 id="1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"><a href="#1）-Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。" class="headerlink" title="1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。"></a>1）    Blackboard：在国内走入了多个高校并在积极应用，但是他是商业付费软件。</h3><h3 id="2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"><a href="#2）-ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。" class="headerlink" title="2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。"></a>2）    ATutor：一个基于web的开源在线作业管理系统，主要以课程为核心的。</h3><h3 id="3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"><a href="#3）-Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。" class="headerlink" title="3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。"></a>3）    Moodle：很瘦欢迎的开源系统，提供了在线作业的支持。浙江万里学院网络课堂就是一个典型的应用，在经过二次开发后，适应了自身的情况。</h3><h3 id="4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"><a href="#4）-WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。" class="headerlink" title="4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。"></a>4）    WebAssign：由美国北卡罗来纳州州立大学物理系设计开发的，作为一个专门的在线作业系统，它的功能完善，涵盖众多课程，深受教师和学生们的喜爱。</h3><h3 id="5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"><a href="#5）-经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。" class="headerlink" title="5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。"></a>5）    经过调查，发现国内现存的系统功能参差不齐，没有相应的规范和统一的思想，不能适应所有院校的实际情况，导致这一系统没有得到普及。</h3><hr><h2 id="三、主要研究内容"><a href="#三、主要研究内容" class="headerlink" title="三、主要研究内容"></a>三、主要研究内容</h2><h3 id="1-系统框架图"><a href="#1-系统框架图" class="headerlink" title="1. 系统框架图"></a>1. 系统框架图</h3><p><img src="https://www.google.com/url?sa=i&amp;source=images&amp;cd=&amp;ved=2ahUKEwiSpMa2gNPmAhWDdXAKHVM0BccQjRx6BAgBEAQ&amp;url=https%3A%2F%2Fwww.canva.cn%2Flearn%2Femotional-pictures%2F&amp;psig=AOvVaw3fryUeVbQFDglKKUKVqwy9&amp;ust=1577439022575791" alt="Google图片"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=16846091&amp;auto=1&amp;height=66"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
